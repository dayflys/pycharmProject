'''

    얕은 복사(주소값 복사) 및 깊은 복사(실제값 복사) 개념

    1. 파이썬

    2. numpy

'''
import numpy as np

#1. 파이썬

#가 . 얕은 복사 (주소값 복사)
# ==> 두개의 변수가 같은 주소를 참조하기 때문에 하나의 변수에서 값을 변경하면 나머지도 영향을 받는다.
x = [1,2,3]
x2=x
print(id(x),id(x2)) #4375130112 4375130112
x[0]= 100
print(x,x2) #[100, 2, 3] [100, 2, 3]
print("*"*100)
#나. 깊은 복사(실제 값 복사)
x = [1,2,3]
x2= x[:] # 많이 사용되는 연산이다. 사용할때마다 매번 새로운 동일한 값들이 생성된다. ==> 메모리 효율이 떨어진다.
x3= x.copy()
x4= list(x)
print(id(x),id(x2),id(x3),id(x4)) #4311312448 4311087808 4310904832 4311429312
x[0]= 100
print(x, x2, x3, x4) #[100, 2, 3] [1, 2, 3] [1, 2, 3] [1, 2, 3]

#2. numpy
arr = np.array(([1,2,3]))
arr2 = arr[:]
print(id(arr),id(arr2)) #4310919920 4310920112 ==> 주소값은 내부적으로 얕은 복사로 처리됨(뷰로 연결) 따라서 얕은 복사와 같은 결과를 도출한다. 다만 주소값만은 다르다.
arr[0] = 100
print(arr, arr2) #[100   2   3] [100   2   3]
print('*' *100)

#numpy 깊은 복사
arr = np.array(([1,2,3]))
arr2 = arr.copy()
arr3 = np.copy(arr)
print(id(arr),id(arr2),id(arr3)) #4668715152 4668714576 4348603312
arr[0] = 100
print(arr,arr2,arr3) #[100   2   3] [1 2 3] [1 2 3]


