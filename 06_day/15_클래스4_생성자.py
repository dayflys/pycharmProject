'''
    생성자(constructor)
    -모든 클래스에서 동일한 이름을 사용한다.
    (자바는 생성자 명을, 클래스 명으로 지정한다.)
    -생성자 문법
    class 클래스 명:
        #생성자
        def __init__(self):
            pass => 원래는 이 부분에서 인스턴스 변수 초기화를 진행한다.

    c1 = 클래스명() -> 생성자 호출 코드 == 객체 생성 코드

    클래스 변수 = 메서드 밖에 만들어지는 변수를 의미 한다.
    클래스 정보는 A 메모리에 저장되며,여기는 클래스 변수가 저장된다
    로컬변수는 C 메모리(stack 메모리)에 저장된다.
    인스턴스 정보는 B 메모리에 저장되며, heap 메모리라고 부르며 인스턴스 변수를 저장한다.

    변수
        클래스 변수는 메서드 밖에서 선언된 변수이다.
        클래스 변수는 self가 붙지 않는다.
        인스턴스 변수는 메서드 안에서 선언된 변수이다
        인스턴스 변수는 self가 붙는다.
        로컬 변수는 함수 파라미터 혹은 함수 내에서 선언된 변수를 이야기 한다.

    메서드
        클래스 메서드도 파라미터로 self를 받지 않는다.
        인스턴스 메서드는 파라미터를 self를 받는다.
            일반메서드
            생성자 - 이름이 정해져 있다(__init__)

    1 프로그램 실행
    2. A 메모리에 클래스 정보(클래스 변수, 클래스 메서드)가 올라간다.
    3. 순차적으로 코드 실행
    4. c1이 stack 메모리에 추가가 됨 -> 메서드 단위로 들어간다.
    5. 인스턴스 정보가 heap 메모리에 저장됨
    6. 파라미터를 전달 받아 stack 메모리에 있던 로컬 변수에 값이 들어간다.
    7. heap 메모리에 있던 인스턴스 변수에 로컬 변수에 있던 값이 할당 된다.
    8. __init__ 메서드가 끝나고 c1에 인스턴스의 주소가 저장됨

'''

class Cat:
    #클래스 변수
    def __init__(self,username,age):#로컬변수
        print('__init__ 생성자')
        self.username = username#인스턴스 변수
        self.age = age#인스턴스 변수

c1 = Cat('야옹이',2)
#인스턴스 변수를 직접 접근해서 조회
print(c1.username)
print(c1.age)


c2 = Cat('나비',3)
print(c2.username)
print(c2.age)
#나비 age 수정 -> c2의 age(인스턴스 변수)에 직접 접근 해서 값을 수정
c2.age = 4
print(c2.age)

'''

인스턴스 변수를 직접 조회, 수정하는 것은 권장하지 않음
이유는 올바른 데이터 저장이 안될 수 있다. => 현실적으로 말이 안되는 값도 저장이 되기 떄문
검증 할 수 있는 방법이 없어서 바로 저장이 된다.
해결은 일반 메서드(인스턴스 메서드)를 활용해서 검증 처리후 저장하도록 한다.

'''